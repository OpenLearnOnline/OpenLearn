name: new_user_registration
on:
  issues:
    types: [opened]

jobs:
  job_add_registration_data_to_datafile:
    name: add_registration_data_to_datafile
    runs-on: ubuntu-latest
    steps:
      - name: initialize git
        run: |
          git config --global user.name modernappsninjabot
          git config --global user.email modernappsninjabot@gmail.com
          git init 
      - name: clone admin-private repo
        run: |
          git clone https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/openlearnonline/admin-private.git
          cd admin-private
          pwd
#          hub remote set-url origin https://${{ secrets.NINJABOTGURU }}:x-oauth-basic@github.com/openlearnonline/admin-private.git
      - name: extract user id and set as requesting_user_id
        run: |
          echo $(echo requesting_user_id=$(echo $(cat /home/runner/work/_temp/_github_workflow/event.json | jq '.issue.user.id' ))) >> $GITHUB_ENV
      - name: verify requesting_user_id
        run: echo $requesting_user_id
      - name: extract user login and set as requesting_user_login
        run: |
          echo $(echo requesting_user_login=$(echo $(cat /home/runner/work/_temp/_github_workflow/event.json | jq '.issue.user.login' | sed 's/"//g' ))) >> $GITHUB_ENV
      - name: verify requesting_user_login
        run: echo $requesting_user_login
      - name: extract org name and set as org_login
        run: |
          echo $(echo org_login=$(echo $(cat /home/runner/work/_temp/_github_workflow/event.json | jq '.organization.login' | sed 's/"//g' ))) >> $GITHUB_ENV
      - name: verify org_login
        run: echo $org_login
      - name: extract issue number and set as issue_number
        run: |
          echo $(echo issue_number=$(echo $(cat /home/runner/work/_temp/_github_workflow/event.json | jq '.issue.number' ))) >> $GITHUB_ENV
      - name: verify issue_number
        run: echo $issue_number
      - name: extract payload data from issue body
        run: |
          echo -e $(cat /home/runner/work/_temp/_github_workflow/event.json | jq '.issue.body' ) > /tmp/issuebody.txt
          cat /tmp/issuebody.txt 
      - name: remove instruction lines from issuebody file
        run: |
          sed '1,4d' /tmp/issuebody.txt > /tmp/issuebody.json
          cat /tmp/issuebody.json
      - name: remove unnecessary forward slashes and trailing quote from issuebody file
        run: |
          sed 's/\\//g' /tmp/issuebody.json > /tmp/issuebody2.json
          cat /tmp/issuebody2.json
          sed '9d' /tmp/issuebody2.json > /tmp/issuebody3.json
          echo } >> /tmp/issuebody3.json
          cat /tmp/issuebody3.json
          mv -f /tmp/issuebody3.json /tmp/issuebody.json
          cat /tmp/issuebody.json
      - name: add metadata fields to user registration data
        run: |
          jq '. += {"memberGithubId":'$requesting_user_id'}' /tmp/issuebody.json > /tmp/issuebody.json.tmp
          mv -f /tmp/issuebody.json.tmp /tmp/issuebody.json
          cat /tmp/issuebody.json
          jq '. += {"memberGithubLogin":"'$requesting_user_login'"}' /tmp/issuebody.json > /tmp/issuebody.json.tmp
          mv -f /tmp/issuebody.json.tmp /tmp/issuebody.json
          cat /tmp/issuebody.json
          jq '. += {"memberOfTeams":["Members"]}' /tmp/issuebody.json > /tmp/issuebody.json.tmp
          mv -f /tmp/issuebody.json.tmp /tmp/issuebody.json
          cat /tmp/issuebody.json
      - name: check if member record exists
        run: |
          cd /home/runner/work/OpenLearn/OpenLearn/admin-private
          jq '.members.member[] | select(.memberGithubId=='$requesting_user_id')' registrations/members.json > /tmp/dupmember.out
          cat /tmp/dupmember.out
          if [ -s /tmp/dupmember.out ]
          then
            echo dupmember=true >> $GITHUB_ENV
          else
            echo dupmember=false >> $GITHUB_ENV
          fi
      - name: verify dupnumber var
        run: echo $dupmember
      - name: add member record to members.json
        run: |
          if [ $dupmember = "false" ]
          then
            cd /home/runner/work/OpenLearn/OpenLearn/admin-private
            jq --argjson groupInfo "$(</tmp/issuebody.json)" '.members.member += [$groupInfo]' registrations/members.json > /tmp/members.json.tmp
            mv -f /tmp/members.json.tmp registrations/members.json
            cat registrations/members.json
          else
            echo "duplicate request, skipping registration"
          fi
      - name: if dupmember true
        if: env.dupmember == 'true'
        run: echo "dupmember is true"
      - name: if dupmember false
        if: env.dupmember == 'false'
        run: echo "dupmember is false"
      - name: push updates to git repo
        if: env.dupmember == 'false'
        run: |
          cd /home/runner/work/OpenLearn/OpenLearn/admin-private
          git add .
          git commit -m "adding new member $requesting_user_login to members.json"
          git push
      - name: test unconditional command
        run: echo "the unconditional command ran"
#      - name: extract issuebody to $issue_body
#        run: |
#          cat /tmp/issuebody.json
#          echo $(echo issue_body=$(echo $(cat /tmp/issuebody.json))) >> $GITHUB_ENV
#          echo $issue_body
#      - name: verify $issue_body
#        run: echo $issue_body          
#      - name: add member record to members.json
#        run: |
#          jq '.members.member += ['$issue_body']' registrations/members.json > /tmp/members.json.tmp
#          mv -f /tmp/members.json.tmp registrations/members.json
#         cat registrations/members.json
#####
#  job_send_github_invitation:
#    name: new registration invitation workflow
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - name: curl orgteamregapicall.sh and make executable
#        run: |
#          curl https://modernapps.ninja/admin/orgteamregapicall.sh -o /tmp/orgteamregapicall.sh
#          sudo chmod +x /tmp/orgteamregapicall.sh
#      - name: make org and team invite api call
#        env:
#          GITHUB_OAUTH_TOKEN: ${{ secrets.NINJABOTGURU }}
#        run: /tmp/orgteamregapicall.sh
#      - name: create hub config file
#        run: |
#          echo "---" > ~/.config/hub
#          echo "github.com: " >> ~/.config/hub
#          echo "- oauth_token: ${{ secrets.NINJABOTGURU }}" >> ~/.config/hub
#          echo "  user: modernappsninjabot" >> ~/.config/hub
#          cat ~/.config/hub
#      - name: close issue ticket
#        run: hub issue update $issue_number -s closed
#      - name: transfer issue ticket to admin-private
#        run: hub issue transfer $issue_number $org_login/admin-private
#      - name: Print event content
#        run: cat /home/runner/work/_temp/_github_workflow/event.json